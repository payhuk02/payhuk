// Script pour ajouter la colonne order_number manquante
// Ce script affiche le SQL √† ex√©cuter dans Supabase

console.log('üîß Script de correction de la colonne order_number manquante\n');

console.log('üìã Instructions:');
console.log('1. Ouvrez votre projet Supabase: https://supabase.com/dashboard/project/hbdnzajbyjakdhuavrvb');
console.log('2. Allez dans SQL Editor');
console.log('3. Copiez et ex√©cutez le SQL ci-dessous\n');

console.log('='.repeat(80));
console.log('SQL √Ä EX√âCUTER DANS SUPABASE:');
console.log('='.repeat(80));

const sql = `
-- Migration pour ajouter la colonne order_number √† la table orders
-- Cette colonne est n√©cessaire pour le syst√®me de num√©rotation des commandes

-- Ajouter la colonne order_number √† la table orders
ALTER TABLE public.orders 
ADD COLUMN IF NOT EXISTS order_number TEXT UNIQUE;

-- Cr√©er un index pour am√©liorer les performances
CREATE INDEX IF NOT EXISTS idx_orders_order_number ON public.orders(order_number);

-- Ajouter un commentaire pour la documentation
COMMENT ON COLUMN public.orders.order_number IS 'Num√©ro unique de commande g√©n√©r√© automatiquement';

-- Fonction pour g√©n√©rer automatiquement le num√©ro de commande
CREATE OR REPLACE FUNCTION generate_order_number()
RETURNS TEXT AS $$
DECLARE
    order_num TEXT;
    counter INTEGER;
BEGIN
    -- G√©n√©rer un num√©ro au format: ORD-YYYYMMDD-XXXX
    -- Utiliser un compteur bas√© sur la date pour √©viter les collisions
    SELECT COALESCE(MAX(CAST(SUBSTRING(order_number FROM 13) AS INTEGER)), 0) + 1
    INTO counter
    FROM orders 
    WHERE order_number LIKE 'ORD-' || TO_CHAR(NOW(), 'YYYYMMDD') || '-%';
    
    order_num := 'ORD-' || TO_CHAR(NOW(), 'YYYYMMDD') || '-' || LPAD(counter::TEXT, 4, '0');
    RETURN order_num;
END;
$$ LANGUAGE plpgsql;

-- Trigger pour g√©n√©rer automatiquement le num√©ro de commande
CREATE OR REPLACE FUNCTION set_order_number()
RETURNS TRIGGER AS $$
BEGIN
    IF NEW.order_number IS NULL OR NEW.order_number = '' THEN
        NEW.order_number := generate_order_number();
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Cr√©er le trigger
DROP TRIGGER IF EXISTS trigger_set_order_number ON public.orders;
CREATE TRIGGER trigger_set_order_number
    BEFORE INSERT ON public.orders
    FOR EACH ROW
    EXECUTE FUNCTION set_order_number();

-- Mettre √† jour les commandes existantes qui n'ont pas de num√©ro
UPDATE public.orders 
SET order_number = generate_order_number()
WHERE order_number IS NULL OR order_number = '';

-- Ajouter une contrainte NOT NULL apr√®s avoir rempli les valeurs existantes
ALTER TABLE public.orders 
ALTER COLUMN order_number SET NOT NULL;
`;

console.log(sql);

console.log('='.repeat(80));
console.log('üìù Explication de la correction:');
console.log('='.repeat(80));

console.log(`
üîß Probl√®me identifi√©:
   - La colonne 'order_number' manque dans la table 'orders'
   - Cette colonne est r√©f√©renc√©e dans le code mais n'existe pas en base

‚úÖ Solution appliqu√©e:
   1. Ajout de la colonne 'order_number' avec contrainte UNIQUE
   2. Cr√©ation d'un index pour les performances
   3. Fonction 'generate_order_number()' pour g√©n√©rer des num√©ros uniques
   4. Trigger automatique pour remplir la colonne lors des insertions
   5. Mise √† jour des commandes existantes

üéØ Format des num√©ros de commande:
   - Format: ORD-YYYYMMDD-XXXX
   - Exemple: ORD-20250118-0001, ORD-20250118-0002, etc.
   - G√©n√©ration automatique et unique

üìã Apr√®s ex√©cution:
   1. La colonne order_number sera ajout√©e √† la table orders
   2. Les commandes existantes auront un num√©ro g√©n√©r√© automatiquement
   3. Les nouvelles commandes auront un num√©ro g√©n√©r√© automatiquement
   4. L'erreur "column orders.order_number does not exist" sera r√©solue
`);

console.log('\nüéâ Une fois le SQL ex√©cut√©, l\'erreur sera corrig√©e !');
