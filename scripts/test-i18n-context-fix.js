#!/usr/bin/env node

/**
 * Script de test pour v√©rifier la correction de l'erreur de contexte i18n
 * V√©rifie que l'initialisation d'i18n est correcte et √©vite les erreurs useContext
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

console.log('üîß Test de correction de l\'erreur de contexte i18n...\n');

let allTestsPassed = true;

// Test 1: V√©rifier que I18nProvider existe et est correctement configur√©
console.log('üìã Test 1: V√©rification du I18nProvider');
const i18nProviderPath = path.join(__dirname, '..', 'src/components/I18nProvider.tsx');
if (fs.existsSync(i18nProviderPath)) {
  const content = fs.readFileSync(i18nProviderPath, 'utf8');
  
  const hasSuspense = content.includes('Suspense');
  const hasUseTranslation = content.includes('useTranslation');
  const hasReadyCheck = content.includes('ready');
  const hasI18nReady = content.includes('I18nReady');
  
  if (hasSuspense && hasUseTranslation && hasReadyCheck && hasI18nReady) {
    console.log('‚úÖ I18nProvider correctement configur√©');
  } else {
    console.log('‚ùå I18nProvider mal configur√©');
    allTestsPassed = false;
  }
} else {
  console.log('‚ùå I18nProvider manquant');
  allTestsPassed = false;
}

// Test 2: V√©rifier l'int√©gration dans App.tsx
console.log('\nüìã Test 2: V√©rification de l\'int√©gration dans App.tsx');
const appPath = path.join(__dirname, '..', 'src/App.tsx');
if (fs.existsSync(appPath)) {
  const content = fs.readFileSync(appPath, 'utf8');
  
  const hasI18nProvider = content.includes('I18nProvider');
  const hasImport = content.includes('import { I18nProvider }');
  const hasWrapper = content.includes('<I18nProvider>');
  
  if (hasI18nProvider && hasImport && hasWrapper) {
    console.log('‚úÖ I18nProvider int√©gr√© dans App.tsx');
  } else {
    console.log('‚ùå I18nProvider non int√©gr√© dans App.tsx');
    allTestsPassed = false;
  }
} else {
  console.log('‚ùå Fichier App.tsx manquant');
  allTestsPassed = false;
}

// Test 3: V√©rifier la configuration i18n.ts
console.log('\nüìã Test 3: V√©rification de la configuration i18n.ts');
const i18nPath = path.join(__dirname, '..', 'i18n.ts');
if (fs.existsSync(i18nPath)) {
  const content = fs.readFileSync(i18nPath, 'utf8');
  
  const hasInitImmediate = content.includes('initImmediate: false');
  const hasInitFunction = content.includes('const initI18n = ()');
  const hasImmediateInit = content.includes('initI18n();');
  
  if (hasInitImmediate && hasInitFunction && hasImmediateInit) {
    console.log('‚úÖ Configuration i18n.ts corrig√©e');
  } else {
    console.log('‚ùå Configuration i18n.ts non corrig√©e');
    allTestsPassed = false;
  }
} else {
  console.log('‚ùå Fichier i18n.ts manquant');
  allTestsPassed = false;
}

// Test 4: V√©rifier les v√©rifications de s√©curit√© dans LanguageSelector
console.log('\nüìã Test 4: V√©rification des v√©rifications de s√©curit√©');
const languageSelectorPath = path.join(__dirname, '..', 'src/components/navigation/LanguageSelector.tsx');
if (fs.existsSync(languageSelectorPath)) {
  const content = fs.readFileSync(languageSelectorPath, 'utf8');
  
  const hasReadyCheck = content.includes('ready');
  const hasReadyCondition = content.includes('if (!ready)');
  const hasDisabledButton = content.includes('disabled');
  
  if (hasReadyCheck && hasReadyCondition && hasDisabledButton) {
    console.log('‚úÖ V√©rifications de s√©curit√© ajout√©es');
  } else {
    console.log('‚ùå V√©rifications de s√©curit√© manquantes');
    allTestsPassed = false;
  }
} else {
  console.log('‚ùå LanguageSelector manquant');
  allTestsPassed = false;
}

// Test 5: V√©rifier que le build fonctionne
console.log('\nüìã Test 5: V√©rification du build');
const distPath = path.join(__dirname, '..', 'dist');
if (fs.existsSync(distPath)) {
  const distFiles = fs.readdirSync(distPath);
  const hasIndexHtml = distFiles.includes('index.html');
  const hasAssets = distFiles.includes('assets');
  
  if (hasIndexHtml && hasAssets) {
    console.log('‚úÖ Build r√©ussi');
  } else {
    console.log('‚ùå Build √©chou√©');
    allTestsPassed = false;
  }
} else {
  console.log('‚ùå Dossier dist manquant');
  allTestsPassed = false;
}

// R√©sum√©
console.log('\n' + '='.repeat(60));
if (allTestsPassed) {
  console.log('üéâ TOUS LES TESTS SONT PASS√âS !');
  console.log('‚úÖ Erreur de contexte i18n corrig√©e :');
  console.log('   - I18nProvider avec Suspense et v√©rifications');
  console.log('   - Configuration i18n.ts avec initImmediate: false');
  console.log('   - V√©rifications de s√©curit√© dans LanguageSelector');
  console.log('   - Int√©gration correcte dans App.tsx');
  console.log('   - Build r√©ussi sans erreurs');
} else {
  console.log('‚ùå CERTAINS TESTS ONT √âCHOU√â');
  console.log('   Veuillez v√©rifier les erreurs ci-dessus');
}
console.log('='.repeat(60));

// Recommandations
console.log('\nüí° Recommandations pour tester manuellement :');
console.log('1. Ouvrir l\'application dans le navigateur');
console.log('2. Ouvrir les outils de d√©veloppement (F12)');
console.log('3. V√©rifier l\'onglet Console - aucune erreur useContext');
console.log('4. Tester le changement de langue');
console.log('5. V√©rifier que les traductions s\'affichent correctement');

process.exit(allTestsPassed ? 0 : 1);
