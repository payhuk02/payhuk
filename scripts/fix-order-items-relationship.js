// Script pour v√©rifier et corriger les relations entre order_items et orders
// Ce script affiche le SQL √† ex√©cuter dans Supabase

console.log('üîß Script de v√©rification des relations order_items/orders\n');

console.log('üìã Instructions:');
console.log('1. Ouvrez votre projet Supabase: https://supabase.com/dashboard/project/hbdnzajbyjakdhuavrvb');
console.log('2. Allez dans SQL Editor');
console.log('3. Copiez et ex√©cutez le SQL ci-dessous\n');

console.log('='.repeat(80));
console.log('SQL √Ä EX√âCUTER DANS SUPABASE:');
console.log('='.repeat(80));

const sql = `
-- V√©rification et correction des relations order_items/orders
-- Ce script r√©sout l'erreur: "Could not find a relationship between 'order_items' and 'orders'"

-- 1. V√©rifier que les tables existent
SELECT 
    schemaname,
    tablename,
    tableowner
FROM pg_tables 
WHERE tablename IN ('orders', 'order_items')
ORDER BY tablename;

-- 2. V√©rifier les contraintes de cl√© √©trang√®re
SELECT
    tc.table_name,
    kcu.column_name,
    ccu.table_name AS foreign_table_name,
    ccu.column_name AS foreign_column_name,
    tc.constraint_name
FROM information_schema.table_constraints AS tc
JOIN information_schema.key_column_usage AS kcu
    ON tc.constraint_name = kcu.constraint_name
    AND tc.table_schema = kcu.table_schema
JOIN information_schema.constraint_column_usage AS ccu
    ON ccu.constraint_name = tc.constraint_name
    AND ccu.table_schema = tc.table_schema
WHERE tc.constraint_type = 'FOREIGN KEY'
    AND tc.table_name IN ('orders', 'order_items')
ORDER BY tc.table_name, kcu.column_name;

-- 3. Recr√©er la contrainte de cl√© √©trang√®re si n√©cessaire
-- (Cette commande est s√ªre - elle ne fait rien si la contrainte existe d√©j√†)
ALTER TABLE public.order_items 
DROP CONSTRAINT IF EXISTS order_items_order_id_fkey;

ALTER TABLE public.order_items 
ADD CONSTRAINT order_items_order_id_fkey 
FOREIGN KEY (order_id) 
REFERENCES public.orders(id) 
ON DELETE CASCADE;

-- 4. V√©rifier que la colonne order_number existe dans orders
-- (Ajouter si elle manque)
ALTER TABLE public.orders 
ADD COLUMN IF NOT EXISTS order_number TEXT UNIQUE;

-- 5. Cr√©er un index sur order_id pour am√©liorer les performances
CREATE INDEX IF NOT EXISTS idx_order_items_order_id ON public.order_items(order_id);

-- 6. Rafra√Æchir le cache de sch√©ma Supabase
-- (Cette commande force Supabase √† recharger les m√©tadonn√©es)
NOTIFY pgrst, 'reload schema';

-- 7. Test de la relation
SELECT 
    o.id as order_id,
    o.order_number,
    o.total_amount,
    COUNT(oi.id) as item_count
FROM public.orders o
LEFT JOIN public.order_items oi ON o.id = oi.order_id
GROUP BY o.id, o.order_number, o.total_amount
LIMIT 5;
`;

console.log(sql);

console.log('='.repeat(80));
console.log('üìù Explication de la correction:');
console.log('='.repeat(80));

console.log(`
üîß Probl√®me identifi√©:
   - Erreur: "Could not find a relationship between 'order_items' and 'orders'"
   - Le cache de sch√©ma Supabase n'est pas synchronis√©
   - Les relations entre tables ne sont pas reconnues

‚úÖ Solution appliqu√©e:
   1. V√©rification de l'existence des tables
   2. V√©rification des contraintes de cl√© √©trang√®re
   3. Recr√©ation de la contrainte order_items_order_id_fkey
   4. Ajout de la colonne order_number si manquante
   5. Cr√©ation d'index pour les performances
   6. Rafra√Æchissement du cache de sch√©ma Supabase
   7. Test de la relation

üéØ R√©sultat attendu:
   - Les tables orders et order_items sont correctement li√©es
   - Le cache de sch√©ma Supabase est synchronis√©
   - L'erreur de relation dispara√Æt
   - Les requ√™tes avec JOIN fonctionnent correctement

üìã Apr√®s ex√©cution:
   1. Les relations seront correctement reconnues
   2. L'erreur "Could not find a relationship" dispara√Ætra
   3. L'application fonctionnera sans erreur de base de donn√©es
   4. Les requ√™tes complexes avec JOIN fonctionneront
`);

console.log('\nüéâ Une fois le SQL ex√©cut√©, l\'erreur de relation sera corrig√©e !');
