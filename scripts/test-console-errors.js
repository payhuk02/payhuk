#!/usr/bin/env node

/**
 * Script de test pour v√©rifier la correction des erreurs de console
 * V√©rifie que les fichiers CSS manquants et les erreurs JavaScript sont corrig√©s
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

console.log('üîç Test des corrections des erreurs de console...\n');

// Fichiers √† v√©rifier
const filesToCheck = [
  'src/components/optimization/PerformanceOptimizer.tsx',
  'dist/index.html',
  'src/App.tsx'
];

let allTestsPassed = true;

// Test 1: V√©rifier que les r√©f√©rences aux fichiers CSS manquants sont supprim√©es
console.log('üìã Test 1: V√©rification des r√©f√©rences CSS manquantes');
filesToCheck.forEach(filePath => {
  const fullPath = path.join(__dirname, '..', filePath);
  if (fs.existsSync(fullPath)) {
    const content = fs.readFileSync(fullPath, 'utf8');
    
    // V√©rifier qu'il n'y a plus de r√©f√©rences √† critical.css ou fonts.css
    const criticalCssRefs = content.match(/critical\.css/g) || [];
    const fontsCssRefs = content.match(/fonts\.css/g) || [];
    
    if (criticalCssRefs.length > 0 || fontsCssRefs.length > 0) {
      console.log(`‚ùå ${filePath}: R√©f√©rences CSS probl√©matiques trouv√©es`);
      console.log(`   - critical.css: ${criticalCssRefs.length} r√©f√©rences`);
      console.log(`   - fonts.css: ${fontsCssRefs.length} r√©f√©rences`);
      allTestsPassed = false;
    } else {
      console.log(`‚úÖ ${filePath}: Aucune r√©f√©rence CSS probl√©matique`);
    }
  }
});

// Test 2: V√©rifier que les v√©rifications de type sont ajout√©es
console.log('\nüìã Test 2: V√©rification des v√©rifications de type');
const performanceOptimizerPath = path.join(__dirname, '..', 'src/components/optimization/PerformanceOptimizer.tsx');
if (fs.existsSync(performanceOptimizerPath)) {
  const content = fs.readFileSync(performanceOptimizerPath, 'utf8');
  
  // V√©rifier la pr√©sence de v√©rifications de type pour className
  const hasTypeCheck = content.includes('typeof iconClass === \'string\'');
  const hasNullCheck = content.includes('icon.className || \'\'');
  
  if (hasTypeCheck && hasNullCheck) {
    console.log('‚úÖ PerformanceOptimizer: V√©rifications de type ajout√©es');
  } else {
    console.log('‚ùå PerformanceOptimizer: V√©rifications de type manquantes');
    allTestsPassed = false;
  }
  
  // V√©rifier la pr√©sence de try-catch
  const hasTryCatch = content.includes('try {') && content.includes('} catch (error)');
  if (hasTryCatch) {
    console.log('‚úÖ PerformanceOptimizer: Gestion d\'erreurs avec try-catch');
  } else {
    console.log('‚ùå PerformanceOptimizer: Gestion d\'erreurs manquante');
    allTestsPassed = false;
  }
}

// Test 3: V√©rifier que le build s'est bien pass√©
console.log('\nüìã Test 3: V√©rification du build');
const distPath = path.join(__dirname, '..', 'dist');
if (fs.existsSync(distPath)) {
  const distFiles = fs.readdirSync(distPath);
  const hasIndexHtml = distFiles.includes('index.html');
  const hasAssets = distFiles.includes('assets');
  
  if (hasIndexHtml && hasAssets) {
    console.log('‚úÖ Build r√©ussi: Fichiers dist pr√©sents');
    
    // V√©rifier le contenu de index.html
    const indexHtmlPath = path.join(distPath, 'index.html');
    const indexContent = fs.readFileSync(indexHtmlPath, 'utf8');
    
    // V√©rifier qu'il n'y a pas de r√©f√©rences √† critical.css ou fonts.css
    const hasProblematicRefs = indexContent.includes('critical.css') || indexContent.includes('fonts.css');
    if (!hasProblematicRefs) {
      console.log('‚úÖ index.html: Aucune r√©f√©rence CSS probl√©matique');
    } else {
      console.log('‚ùå index.html: R√©f√©rences CSS probl√©matiques trouv√©es');
      allTestsPassed = false;
    }
  } else {
    console.log('‚ùå Build √©chou√©: Fichiers dist manquants');
    allTestsPassed = false;
  }
} else {
  console.log('‚ùå Dossier dist manquant');
  allTestsPassed = false;
}

// R√©sum√©
console.log('\n' + '='.repeat(50));
if (allTestsPassed) {
  console.log('üéâ TOUS LES TESTS SONT PASS√âS !');
  console.log('‚úÖ Les erreurs de console ont √©t√© corrig√©es :');
  console.log('   - Fichiers CSS manquants (critical.css, fonts.css)');
  console.log('   - Erreur JavaScript e.includes is not a function');
  console.log('   - Gestion d\'erreurs am√©lior√©e');
} else {
  console.log('‚ùå CERTAINS TESTS ONT √âCHOU√â');
  console.log('   Veuillez v√©rifier les erreurs ci-dessus');
}
console.log('='.repeat(50));

// Recommandations
console.log('\nüí° Recommandations pour tester manuellement :');
console.log('1. Ouvrir l\'application dans le navigateur');
console.log('2. Ouvrir les outils de d√©veloppement (F12)');
console.log('3. V√©rifier l\'onglet Console pour les erreurs');
console.log('4. V√©rifier l\'onglet Network pour les requ√™tes 404');
console.log('5. Tester sur diff√©rents appareils (mobile, tablette, desktop)');

process.exit(allTestsPassed ? 0 : 1);
